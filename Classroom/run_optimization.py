import pickle
import os
import outdoor
from outdoor.outdoor_core.input_classes.superstructure import Superstructure

# get the current working directory
current_path = os.getcwd()

# add the file name generated by the GUI to the current working directory
# replace "xxx.pkl" with the name of your superstructure file
path = os.path.join(current_path, "Tomato_pomace_solution_superstructure.pkl") # eg: TP_case_study_superstructure.pkl

# open the file and load the superstructure object
with open(path, 'rb') as file:
    superstructureObj = pickle.load(file)

# define where you want to save the results
savePath = os.path.join(current_path, "results")

# this function creates the superstructure, this is important methode to check if all the connections are correct
outdoor.create_superstructure_flowsheet(superstructure=superstructureObj,
                                        path=savePath,
                                        saveName='Figure_superstructure')

# generate the abstract model for the superstructure optimization problem to be loaded into
abstract_model = outdoor.SuperstructureProblem(parser_type='Superstructure')

# define the solver options, you can change the options according to your needs
solverOptions = {"IntFeasTol": 1e-8,  # tolerance for integer feasibility
                 "NumericFocus": 0,}   # 0: balanced, 1: feasibility, 2: optimality, 3: feasibility and optimality

# solve the optimization problem
model_output = abstract_model.solve_optimization_problem(input_data=superstructureObj,
                                                         optimization_mode='single',
                                                         solver='gurobi',
                                                         interface='local',
                                                         options=solverOptions,)

# save the general results as a txt file, you have to specify the path
model_output.get_results(path=savePath,
                         saveName='txt_results')

# make an "analyzer object" which you can use to plot various results
analyzer = outdoor.BasicModelAnalyzer(model_output)

# E.g.: create the optimized flow sheet
analyzer.create_flowsheet(path=savePath,
                          saveName='Figure_flowsheet')

# create a bar plot of the different OPEX contributions
analyzer.create_bar_plot_opex(path=savePath, saveName='OPEX_bar_plot', barColor='blue', barwidth=0.5)
