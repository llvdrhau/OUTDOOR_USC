import sys
import os
import pickle
import outdoor

# start the memory profiler
scrPath = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../src'))
sys.path.insert(0, scrPath)

# get the current working directory
currentScriptDir = os.path.dirname(__file__)

# define where you want to save the results
resultsPath = os.path.join(currentScriptDir, "results")
saveOutputObjectDir = os.path.join(currentScriptDir, 'saved_files')

# set optimization mode
optimization_mode = 'sensitivity'

# replace "xxx.pkl" with the name of your superstructure file
fileName = "Case_study_BSG_1_superstructure.pkl" # eg: TP_case_study_superstructure.pkl

# add the file name generated by the GUI to the current working directory
path = os.path.join(currentScriptDir, fileName)

# open the file and load the superstructure object
with open(path, 'rb') as file:
    superstructureObj = pickle.load(file)

# generate the abstract model for the superstructure optimization problem to be loaded into
abstract_model = outdoor.SuperstructureProblem(parser_type='Superstructure')

# define the solver options, you can change the options according to your needs
solverOptions = {"IntFeasTol": 1e-8,  # tolerance for integer feasibility
                 "NumericFocus": 0,}   # 0: balanced, 1: feasibility, 2: optimality, 3: feasibility and optimality

model_output = abstract_model.solve_optimization_problem(input_data=superstructureObj,
                                                         optimization_mode=optimization_mode,
                                                         solver='gurobi',
                                                         interface='local',
                                                         options=solverOptions,)

# save the text file with the overview of the optimization
model_output.get_results(savePath=resultsPath,
                         saveName="Sensitivity_overview.txt",
                         pprint=False)

analyzer = outdoor.AdvancedMultiModelAnalyzer(model_output)
fig = analyzer.create_sensitivity_graph(savePath=resultsPath,
                                        saveName="Sensitivity_price",
                                        figureMode="single",
                                        xlable="Product selling price (â‚¬/t)]",)

# data = analyzer._collect_sensi_data('EBIT')
# dataRegressionY = data['Price (ProductPrice)_6000'][0][-3:-1]  # price
# dataRegressionX = data['Price (ProductPrice)_6000'][1][-3:-1]  # Ebit






